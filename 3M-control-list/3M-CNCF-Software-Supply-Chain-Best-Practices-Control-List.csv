Number,Control Objective,Category,Control,Assurance Level,Implementation Guidance,Evidence Recommendations to Validate Implementation,Control Owner,<Target> Status,Notes
SSSC-SC-1.1.1,Securing the Source Code,Verification,Require Signed Commits,Moderate,Sign source code commits and tags to ensure integrity and non-repudiation of code using GPG or s/mime keys,,,,
SSSC-SC-1.2.1,Securing the Source Code,Verification,Enforce full attestation and verification for protected branches,High,Establish attribution of changes to source code via out-of-band mechanism,,,,
SSSC-SC-2.1.1,Securing the Source Code,Automation,Prevent Committing secrets to the repository,Moderate,"Use a credential scanning tool to detect secret leaks including credentials, keys, or tokens",,,,
SSSC-SC-2.2.1,Securing the Source Code,Automation,Define owership for code repository,Low,Define ownership of code repository project inventory methods,,,,
SSSC-SC-2.2.2,Securing the Source Code,Automation,Define owership for code repository,High,"Create and enforce code standards including templates (also .gitignore, .gitattributes) and denylist files to help mitigate injection risks and provide higher assurance",,,,
SSSC-SC-2.3.3,Securing the Source Code,Automation,Automate software security scanning and testing,High,"The metadata from security tooling such as SAST tooling should be recorded and linked to a hash of the build artefact to provide chain of custody and provenance.  Both the coverage and results of these tests should be published as part of the repository information to help downstream consumers of software better assess the stability, reliability,
and/or suitability of a product or library.",,,,
SSSC-SC-3.1.1,Securing the Source Code,Controlled Environments,Establish and adhere to contribution policies,Moderate,"Define configuration options or configuration rules to enforce security, hygiene and operational policies.",,,,
SSSC-SC-3.2.1,Securing the Source Code,Controlled Environments,Define roles aligned to functional responsibilities,Moderate,Define roles and associated access controls based upon the different personas interacting with the source code repositories.,,,,
SSSC-SC-3.3.1,Securing the Source Code,Controlled Environments,Enforce an independent four-eyes principle,Moderate,"Ensure that at least two individuals, of which one should have write access to the branch, that are independent of the request must review and approve commit requests.",,,,
SSSC-SC-3.4.1,Securing the Source Code,Controlled Environments,Use branch protection rules,Moderate,"Enable configuration and restriction of source code operations on individual branches to enforce the usage of pull requests with specified precondition and approval rules for protected repositories, ensuring that a human code review process is followed or an automated status checking of a branch occurs.",,,,
SSSC-SC-3.5.1,Securing the Source Code,Controlled Environments,Validate runtime security of version control system (VCS),Moderate,Ensure that configuration and authentication anomalies are forwarded to organizational Security Information and Event Management (SIEM) systems for evaluation and alerting.,,,,Added
SSSC-SC-3.5.2,Securing the Source Code,Controlled Environments,Validate runtime security of version control system (VCS),Moderate,Perform quarterly tests to ensure that the event detection and alerting system is functioning properly.  Review results to improve detection capabilities.,,,,Added
SSSC-SC-4.1.1,Securing the Source Code,Secure Authentication,Enforce MFA for accessing source code repositories,Moderate,Enforce Multi-factor authentication (MFA) at the source code repository level for software projects.,,,,
SSSC-SC-4.2.1,Securing the Source Code,Secure Authentication,Use SSH keys to provide developers access to source code repositories,Moderate,Use SSH keys to provide developers access to source code repositories,,,,
SSSC-SC-4.3.1,Securing the Source Code,Secure Authentication,Have a key rotation policy,Moderate,Implement a key rotation policy to ensure that compromised keys will cease to be usable after a certain period of time.,,,,
SSSC-SM-1.1.1,Securing Materials,Verification,Verify third party artefacts and open source libraries,Moderate,Any software ingested must be scanned using Software Composition Analysis (SCA) tools to detect whether any vulnerable open-source software is used in the final product.,,,,
SSSC-SM-1.2.1,Securing Materials,Verification,Validate against checksums ,Moderate,All third party artefacts and any other dependencies should validate their checksums against a known good source and validate any cryptographic signatures. ,,,,
SSSC-SM-1.3.1,Securing Materials,Verification,Verify third party artefacts and open source libraries,High,3rd party artefacts should be pen tested to ensure that the software is resistant to standard attacks and no basic security errors or loopholes exist,,,,
SSSC-SM-1.4.1,Securing Materials,Verification,Require SBOM from third party supplier,High,Vendors should be required to provide Software Bills of Materials (SBOMs) containing the explicit details of the software and versions used within the supplied product.,,,,
SSSC-SM-1.5.1,Securing Materials,Verification,Track dependencies between open source components,Moderate,"A register should be maintained of a project’s open source components, dependencies and vulnerabilities to help trace any deployed artefacts with new vulnerabilities.",,,,
SSSC-SM-1.5.2,Securing Materials,Verification,Track dependencies between open source components,Moderate,"Generate and maintain a supply chain inventory to help identify the software vendors, suppliers, and sources used in an organization with the associated software and versions",,,,
SSSC-SM-1.6.1,Securing Materials,Verification,Build libraries based upon source code,High,Build binaries directly from the source code. This provides a clear link between the library source code and the compiled binary,,,,
SSSC-SM-1.7.1,Securing Materials,Verification,Define and prioritize trusted package managers and repositories,High,Minimize ingesting from public repositories,,,,
SSSC-SM-1.8.1,Securing Materials,Verification,Generate an immutable SBOM of the code,Moderate,"Provide a clear list of the contents within the final software
package. Consumers of the software will then be able to analyse the SBOM, aligning it with vulnerability data to directly identify vulnerabilities based upon the exact package contents",,,,
SSSC-SA-1.9.1,Securing Materials,Verification,Track Bill of Materials (SBOM) information in a secure location,Moderate,Use a secure metadata tracking service to store SBOM generation information for incident and problem management purposes.,,,,
SSSC-SM-2.1.1,Securing Materials,Automation,Scan software for vulnerabilities,Moderate,Scan and evaluate software dependencies using software composition analysis to ensure the vulnerabilities they bring are within the risk limits of the product’s assurance level,,,,
SSSC-SM-2.2.1,Securing Materials,Automation,Scan software for license implications,Moderate,Scan software for license implications and ensure that it meets the company standard for open-source software.  ,,,,
SSSC-SM-2.2.2,Securing Materials,Automation,Scan software for license implications,Moderate,Licensing metadata should be recorded during the build process and distributed with the artefact SBOM,,,,
SSSC-SM-2.3.1,Securing Materials,Automation,Run software composition analysis on ingested software,Moderate,Ensure validation of the security of the open source modules  before the build process,,,,
SSSC-SM-2.4.1,Securing Materials,Automation,Monitor for ingestion anomalies and other materials management security events,Moderate,Ensure that  ingestion anomalies and other materials management security events are forwarded to organizational Security Information and Event Management (SIEM) systems for evaluation and alerting.,,,,Added
SSSC-SM-2.4.2,Securing Materials,Automation,Monitor for ingestion anomalies and other materials management security events,Moderate,Perform quarterly tests to ensure that the event detection and alerting system is functioning properly.  Review results to improve detection capabilities.,,,,Added
SSSC-BP-1.1.1,Securing Build Pipelines,Verification,Cryptographically guarantee policy adherence,High,"Project and organizational release policy should be maintained as a policy template. Metadata produced during the build process must be analyzed to ensure that the products, materials, and processes used during the build pipeline fall within controls set in the policy template.",,,,
SSSC-BP-1.2.1,Securing Build Pipelines,Verification,Validate environments and dependencies before usage,Moderate,"Checksums and any signatures should be validated both in the downloading or ingestion process, and again by the build worker.  This should include validating package manager signatures, checking out specific Git commit hashes, and verifying SHA sums of input sources
and binaries.",,,,
SSSC-BP-1.3.1,Securing Build Pipelines,Verification,Validate runtime security of build workers,Moderate,"Enable out-of-band verification of runtime environment security, as defined by execution of policies using tools such as seccomp, AppArmor, and SELinux, to provide defense in depth against attacks on build infrastructure.",,,,
SSSC-BP-1.3.2,Securing Build Pipelines,Verification,Validate runtime security of build workers,Moderate,"Restrict high privilege kernel capabilities such as debugger, device, and network attachments ",,,,
SSSC-BP-1.3.3,Securing Build Pipelines,Verification,Validate runtime security of build workers,Moderate,Build worker security events should be forwarded to organizational Security Information and Event Management (SIEM) systems for remediation.,,,,Added
SSSC-BP-1.3.4,Securing Build Pipelines,Verification,Validate runtime security of build workers,Moderate,Perform quarterly tests to ensure that the event detection and alerting system is functioning properly.  Review results to improve detection capabilities.,,,,Added
SSSC-BP-1.4.1,Securing Build Pipelines,Verification,Validate Build artefacts through verifiably reproducible builds,High,"A deterministic build produces equivalent outputs when given the same inputs and enables us to detect unintended changes (whether malicious, such as malware and backdoors, or accidental). Verifiably reproducible builds improve on this by enabling us to cryptographically attest that the given inputs produce the same output",,,,
SSSC-BP-1.5.1,Securing Build Pipelines,Verification,Lock and Verify External Requirements From The Build Process,Moderate,Third party packages that are part of your build process should be maintained in a designated artifact respository.,,,,
SSSC-BP-1.6.1,Securing Build Pipelines,Verification,Find and Eliminate Sources Of Non-Determinism,High,"Create reproducable builds by evaluating timestamps, locale differences, and embedded version information are just a few of the things to remove sources of determinism in the build process",,,,
SSSC-BP-1.7.1,Securing Build Pipelines,Verification,Record The Build Environment,High,"In order to reproduce a build environment, the versions of all tools and required configurations should be recorded.  This includes compilers, system libraries, build paths, and operating systems.",,,,
SSSC-BP-1.8.1,Securing Build Pipelines,Verification,Automate Creation Of The Build Environment,High,Use automation to allow other developers or verifiers who wish to build your software need to be able to recreate the build environment with minimum effort. ,,,,
SSSC-BP-1.9.1,Securing Build Pipelines,Verification,Distribute Builds Across Different Infrastructure,High,"Distribute the builds to multiple instances. Each instance independently and deterministically builds the same component. A hash of each resulting build can then be verified to ensure that the results are the same, and any divergence should be examined",,,,
SSSC-BP-1.10.1,Securing Build Pipelines,Verification,Sign Every Step in the Build Process,Moderate,"Build step inputs, outputs, and process traces should be collected and evaluated as part of the software release and distribution process. ",,,,
SSSC-BP-1.10.2,Securing Build Pipelines,Verification,Sign Every Step in the Build Process,Moderate,The final artefact bundle should include these collective signatures and itself be signed to give integrity to the completed artefact and all its associated metadata,,,,
SSSC-BP-1.11.1,Securing Build Pipelines,Verification,Validate the Signatures Generated at Each Step,Moderate,"The integrity of images, deployment configuration, and application packages included in artefacts should all be validated using the signatures generated by each step in its build process",,,,
SSSC-BP-1.11.2,Securing Build Pipelines,Verification,Validate the Signatures Generated at Each Step,Moderate,"Software metadata, such as SBOMs, should have validated signatures to ensure objects in an artefact’s manifest or dependency metadata store have not been tampered with between build and runtime",,,,
SSSC-BP-1.12.1,Securing Build Pipelines,Verification,Track build event information in a secure location,Moderate,Use a secure metadata tracking service to store build artefact event information for incident and problem management purposes.,,,,
SSSC-BP-2.1.1,Securing Build Pipelines,Automation,Build and related continuous integration/continuous delivery steps should all be automated through a pipeline defined as code,Moderate,"All steps from code checkout, to checksum and signature
validation, to building and compilation, to publishing, and eventually to deployment should be automated",,,,
SSSC-BP-2.2.1,Securing Build Pipelines,Automation,Standardize pipelines across projects,High,Template CI/CD pipelines and verify that pipelines meet organizational standards,,,,
SSSC-BP-2.3.1,Securing Build Pipelines,Automation,Standardize pipelines across projects,High,"Verification of pipelines should occur before release or
distribution. The CNCF project in-toto provides a layout specification enabling out-of-band verification of CI/CD pipelines",,,,
SSSC-BP-2.4.1,Securing Build Pipelines,Automation,Provision a secured orchestration platform to host software factory,Moderate,The provisioning process should be described as IaC and happen through an automated and audited process,,,,
SSSC-BP-2.5.1,Securing Build Pipelines,Automation,Build Workers Should be Single Use,Moderate,"Build Workers, the containers which perform the Build Steps, should be single use. This lowers the blast radius and limits the attack surface by keeping the lifespan of a build worker to a single build operation.",,,,
SSSC-BP-2.6.1,Securing Build Pipelines,Automation,Validate images and updates,Moderate,"Consider the Notary project, based on TUF, to enable the creation and interaction of trusted collections.  ",,,,
SSSC-BP-2.7.1,Securing Build Pipelines,Automation,Create a secure repository for artefact metadata,Moderate,"Create a secure repository to provide authentication, integrity and auditability guarantees for the supply chain.  Consider using in-toto or similar frameworks",,,,
SSSC-BP-2.8.1,Securing Build Pipelines,Automation,Automate software security scanning and testing,Moderate,"Security specific scans should be performed, including Static application security testing (SAST)",,,,Moved
SSSC-BP-2.8.2,Securing Build Pipelines,Automation,Automate software security scanning and testing,Moderate,"Security specific scans should be performed, including Interactive (IAST) or Dynamic (DAST) application security testing",,,,Moved
SSSC-BP-3.1.1,Securing Build Pipelines,Controlled Environments,Ensure Software Factory has minimal network connectivity,High,"The software factory should have no network connectivity other than to connect to the trusted sources of hardened source code, the dependency repository and code signing infrastructure.",,,,
SSSC-BP-3.1.2,Securing Build Pipelines,Controlled Environments,Ensure Software Factory has minimal network connectivity,High,The build workers will require a secure shared storage capability to pass data between each worker. This storage must be encrypted and secured.,,,,
SSSC-BP-3.2.1,Securing Build Pipelines,Controlled Environments,Segregate the Duties of Each Build Worker,High,"When planning what the build worker will be responsible for, consider segregation of duties within the domain of a particular build. It is generally better to have specific build workers handle specific parts of a build.",,,,
SSSC-BP-3.3.1,Securing Build Pipelines,Controlled Environments,Pass in Build Worker Environment and Commands,High,The Build Worker’s commands or actions should be passed in explicitly at worker provisioning and it should not have capability to pull in its own environment.,,,,
SSSC-BP-3.4.1,Securing Build Pipelines,Controlled Environments,Write Output to a Separate Secured Storage Repo,High,The output artefact should be written to a separate shared storage from the inputs. A process separate from the Build Worker should then upload that artefact to an appropriate repository.,,,,
SSSC-BP-4.1.1,Securing Build Pipelines,Secure Authentication/Access,Only allow pipeline modifications through “pipeline as code”,Moderate,The pipeline configuration should be deployed through the pipeline as code and should be immutable. It should not be possible for an administrator to modify an instantiated pipeline,,,,
SSSC-BP-4.2.1,Securing Build Pipelines,Secure Authentication/Access,Define user roles,Moderate,Organizations must define user roles in a software factory which should be used to define permission boundaries.,,,,
SSSC-BP-4.3.1,Securing Build Pipelines,Secure Authentication/Access,Follow established practices for establishing a root of trust from an offline source,High,Root of trust for a software factory must follow standardized methods for establishing root of trust from an offline source.,,,,
SSSC-BP-4.4.1,Securing Build Pipelines,Secure Authentication/Access,Use short-lived Workload Certificates,High,Workloads should be issued short lived credentials with automated rotation.,,,,
SSSC-BP-4.5.1,Securing Build Pipelines,Secure Authentication,Use short-lived/ephemeral credentials for machine/service access,Moderate,"Use randomly generated short lived tokens (Oauth 2.0, OpenID Connect) for the access management of machines and services such as CI/CD pipeline agents",,,,
SSSC-SD-1.1.1,Securing Deployments,Verification,"Ensure clients can perform Verification of Artefacts and
associated metadata",Moderate,Clients receiving software artefacts from the distribution mechanism must be able to verify the integrity of the downloaded files,,,,
SSSC-SD-1.1.2,Securing Deployments,Verification,"Ensure clients can perform Verification of Artefacts and
associated metadata",Moderate,Ensure the view a client has of the repository is consistent and up to date so the client sees the latest version of all the files it has access to.,,,,
SSSC-SD-1.1.3,Securing Deployments,Verification,"Ensure clients can perform Verification of Artefacts and
associated metadata",Moderate,"If an SBOM is created, its signatures must be verified, and the associated keys must be validated as belonging to an
authorized party",,,,
SSSC-SD-1.2.1,Securing Deployments,Verification,Ensure clients can verify the “freshness” of files,Moderate,Clients must be in a position to recognize when they are being provided files that are out of date,,,,
SSSC-SD-1.3.1,Securing Deployments,Verification,Track deployment event information in a secure location,Moderate,Use a secure metadata tracking service to store deployment event information for incident and problem management purposes.,,,,
SSSC-SD-2.1.1,Securing Deployments,Automation,Implement a capability to securely deliver software artifacts such as TUF or equivalent,High,"TUF is a specification for securely delivering software artefacts by combining trust, compromise resilience, integrity, and freshness. It is a graduated CNCF project and has been deployed in various contexts",,,,
SSSC-SD-3.1.1,Securing Deployments,Controlled Environments,Limit which artefacts any given party is authorized to certify,High,"Trust must expire at predefined intervals, unless
renewed",,,,
SSSC-SD-3.1.2,Securing Deployments,Controlled Environments,Limit which artefacts any given party is authorized to certify,High,The system must make it clear which artefacts or metadata a given party is trusted to certify using selective trust delegations,,,,
SSSC-SD-3.2.1,Securing Deployments,Controlled Environments,Build in a system for rotating and revoking private keys,High,"The ability to rotate and revoke private keys must be built into the distribution mechanism. This distribution mechanism must allow users to ensure that they are using a currently trusted set of keys, and not keys that have previously been revoked",,,,
SSSC-SD-3.2.2,Securing Deployments,Controlled Environments,Use a container registry that supports OCI image-spec images,High,An internal image registry should be deployed and configured to support artefact distribution with OCI spec security properties ,,,,
SSSC-SD-4.1.1,Securing Deployments,Encryption,Encrypt artefacts before distribution & ensure only authorized platforms have decryption capabilities,High,"Encrypt artefacts so they are accessible only by authorized parties, such as the clusters, vulnerability scanners, etc. 

OCI image encryption is implemented via the ocicrypt library, supported by CNCF projects containerd and cri-o runtimes, as well as build tools such as buildah and skopeo.",,,,
SSSC-SD-4.1.2,Securing Deployments,Encryption,Encrypt artefacts before distribution & ensure only authorized platforms have decryption capabilities,High,It is recommended organizations use key management and distribution systems with identity and attestation mechanisms (e.g. SPIFFE/SPIRE) to accomplish this.,,,,